left_eigenvector <- eigen(t(probs))$vectors[,1]
return (sapply(left_eigenvector / sum(left_eigenvector), Re))
}
calculate_by_matrix_multiplication <- function (probs) {
return ((probs %*% probs %*% probs %*% probs)[1, ])
}
cat("Transition probabilities (eigenvectors): ", calculate_by_eigenvector(P), "\n")
cat("Transition probabilities (matrices): ", calculate_by_matrix_multiplication(P))
estimate_probability <- Vectorize(function (m, n) {
sample_data <- apply(
replicate(m, sample(0:9, n, replace = T)), 2,
function(x) grepl(TLN, paste(x, collapse = "")))
return (length(sample_data[sample_data == TRUE]) / length(sample_data))
})
theoretical_probability <- function (n) 1 - ((1 - 0.001) ^ n)
x <- seq(50, 4000, by = 50)
estimated_data = estimate_probability(100, x)
theoretical_data = theoretical_probability(x)
plot(
x,
estimated_data, col ="blue", lwd = 3)
lines(
x,
theoretical_data)
plot(
x,
abs(estimated_data - theoretical_data), col ="blue", lwd = 3, type="l")
x <- seq(1, 50, by = 1)
n <- 1000
m <- 10
estimated_data = apply(replicate(m, estimate_probability(x, n) - theoretical_probability(n)), 1, function (x) quantile(x, .95))
#plot(
#  x,
#  abs(estimated_data - theoretical_data), col ="blue", lwd = 3, type="l")
calculate_length <- Vectorize(function() {
values <- vector()
length <- 0
while (paste(values, collapse = "") != TLN) {
values <- tail(append(values, sample(0:9, 1)), nchar(TLN))
length <- length + 1
}
return (length)
})
mean(replicate(100, calculate_length()))
x <- seq(1, 50, by = 1)
n <- 1000
m <- 10
estimated_data = apply(replicate(m, estimate_probability(x, n) - theoretical_probability(n)), 1, function (x) quantile(x, .95))
plot(
x,
estimated_data, col ="blue", lwd = 3, type="l")
TIN <- 20
# set.seed(TIN) TODO: uncomment
TLN <- paste("0", TIN, sep = "")
P = matrix(c(
0.9, 0.1, 0.0, 0.0,
0.8, 0.1, 0.1, 0.0,
0.9, 0.0, 0.0, 0.1,
0.8, 0.1, 0.1, 0), nrow=4, byrow=T)
calculate_by_eigenvector <- function (probs) {
left_eigenvector <- eigen(t(probs))$vectors[,1]
return (sapply(left_eigenvector / sum(left_eigenvector), Re))
}
calculate_by_matrix_multiplication <- function (probs) {
return ((probs %*% probs %*% probs %*% probs)[1, ])
}
cat("Transition probabilities (eigenvectors): ", calculate_by_eigenvector(P), "\n")
cat("Transition probabilities (matrices): ", calculate_by_matrix_multiplication(P))
estimate_probability <- Vectorize(function (m, n) {
sample_data <- apply(
replicate(m, sample(0:9, n, replace = T)), 2,
function(x) grepl(TLN, paste(x, collapse = "")))
return (length(sample_data[sample_data == TRUE]) / length(sample_data))
})
theoretical_probability <- function (n) 1 - ((1 - 0.001) ^ n)
x <- seq(50, 4000, by = 50)
estimated_data = estimate_probability(100, x)
theoretical_data = theoretical_probability(x)
plot(
x,
estimated_data, col ="blue", lwd = 3)
lines(
x,
theoretical_data)
plot(
x,
abs(estimated_data - theoretical_data), col ="blue", lwd = 3, type="l")
x <- seq(1, 1000, by = 100)
n <- 1000
m <- 10
estimated_data = apply(replicate(m, estimate_probability(x, n) - theoretical_probability(n)), 1, function (x) quantile(x, .95))
plot(
x,
estimated_data, col ="blue", lwd = 3, type="l")
calculate_length <- Vectorize(function() {
values <- vector()
length <- 0
while (paste(values, collapse = "") != TLN) {
values <- tail(append(values, sample(0:9, 1)), nchar(TLN))
length <- length + 1
}
return (length)
})
mean(replicate(100, calculate_length()))
x <- seq(1, 250, by = 10)
n <- 1000
m <- 10
estimated_data = apply(replicate(m, estimate_probability(x, n) - theoretical_probability(n)), 1, function (x) quantile(x, .95))
plot(
x,
estimated_data, col ="blue", lwd = 3, type="l")
x <- seq(1, 250, by = 10)
n <- 1000
m <- 10
estimated_data = apply(replicate(m, estimate_probability(x, n) - theoretical_probability(n)), 1, function (x) quantile(x, .95))
plot(
x,
estimated_data, col ="blue", lwd = 3, type="l")
abline(v = 0.03, col = "darkgreen")
TIN <- 20
# set.seed(TIN) TODO: uncomment
TLN <- paste("0", TIN, sep = "")
P = matrix(c(
0.9, 0.1, 0.0, 0.0,
0.8, 0.1, 0.1, 0.0,
0.9, 0.0, 0.0, 0.1,
0.8, 0.1, 0.1, 0), nrow=4, byrow=T)
calculate_by_eigenvector <- function (probs) {
left_eigenvector <- eigen(t(probs))$vectors[,1]
return (sapply(left_eigenvector / sum(left_eigenvector), Re))
}
calculate_by_matrix_multiplication <- function (probs) {
return ((probs %*% probs %*% probs %*% probs)[1, ])
}
cat("Transition probabilities (eigenvectors): ", calculate_by_eigenvector(P), "\n")
cat("Transition probabilities (matrices): ", calculate_by_matrix_multiplication(P))
estimate_probability <- Vectorize(function (m, n) {
sample_data <- apply(
replicate(m, sample(0:9, n, replace = T)), 2,
function(x) grepl(TLN, paste(x, collapse = "")))
return (length(sample_data[sample_data == TRUE]) / length(sample_data))
})
theoretical_probability <- function (n) 1 - ((1 - 0.001) ^ n)
x <- seq(50, 4000, by = 50)
estimated_data = estimate_probability(100, x)
theoretical_data = theoretical_probability(x)
plot(
x,
estimated_data, col ="blue", lwd = 3)
lines(
x,
theoretical_data)
plot(
x,
abs(estimated_data - theoretical_data), col ="blue", lwd = 3, type="l")
x <- seq(1, 250, by = 10)
n <- 1000
m <- 10
estimated_data = apply(replicate(m, estimate_probability(x, n) - theoretical_probability(n)), 1, function (x) quantile(x, .95))
plot(
x,
estimated_data, col ="blue", lwd = 3, type="l")
abline(h = 0.03, col = "darkgreen")
calculate_length <- Vectorize(function() {
values <- vector()
length <- 0
while (paste(values, collapse = "") != TLN) {
values <- tail(append(values, sample(0:9, 1)), nchar(TLN))
length <- length + 1
}
return (length)
})
mean(replicate(100, calculate_length()))
x <- seq(200, 1000, by = 100)
n <- 1000
m <- 10
estimated_data = apply(replicate(m, estimate_probability(x, n) - theoretical_probability(n)), 1, function (x) quantile(x, .95))
plot(
x,
estimated_data, col ="blue", lwd = 3, type="l")
abline(h = 0.03, col = "darkgreen")
x <- seq(100, 1000, by = 100)
n <- 1000
m <- 10
estimated_data = apply(replicate(m, estimate_probability(x, n) - theoretical_probability(n)), 1, function (x) quantile(x, .95))
plot(
x,
estimated_data, col ="blue", lwd = 3, type="l")
abline(h = 0.03, col = "darkgreen")
x <- seq(100, 1000, by = 100)
n <- 1000
m <- 100
estimated_data = apply(replicate(m, estimate_probability(x, n) - theoretical_probability(n)), 1, function (x) quantile(x, .95))
plot(
x,
estimated_data, col ="blue", lwd = 3, type="l")
abline(h = 0.03, col = "darkgreen")
TIN <- 20
# set.seed(TIN) TODO: uncomment
TLN <- paste("0", TIN, sep = "")
P = matrix(c(
0.9, 0.1, 0.0, 0.0,
0.8, 0.1, 0.1, 0.0,
0.9, 0.0, 0.0, 0.1,
0.8, 0.1, 0.1, 0), nrow=4, byrow=T)
calculate_by_eigenvector <- function (probs) {
left_eigenvector <- eigen(t(probs))$vectors[,1]
return (sapply(left_eigenvector / sum(left_eigenvector), Re))
}
calculate_by_matrix_multiplication <- function (probs) {
return ((probs %*% probs %*% probs %*% probs)[1, ])
}
cat("Transition probabilities (eigenvectors): ", calculate_by_eigenvector(P), "\n")
cat("Transition probabilities (matrices): ", calculate_by_matrix_multiplication(P))
estimate_probability <- Vectorize(function (m, n) {
sample_data <- apply(
replicate(m, sample(0:9, n, replace = T)), 2,
function(x) grepl(TLN, paste(x, collapse = "")))
return (length(sample_data[sample_data == TRUE]) / length(sample_data))
})
theoretical_probability <- function (n) 1 - ((1 - 0.001) ^ n)
x <- seq(50, 4000, by = 50)
estimated_data = estimate_probability(100, x)
theoretical_data = theoretical_probability(x)
plot(
x,
estimated_data, col ="blue", lwd = 3)
lines(
x,
theoretical_data)
plot(
x,
abs(estimated_data - theoretical_data), col ="blue", lwd = 3, type="l")
x <- seq(100, 1000, by = 100)
n <- 1000
m <- 100
estimated_data = apply(replicate(m, estimate_probability(x, n) - theoretical_probability(n)), 1, function (x) quantile(x, .95))
plot(
x,
estimated_data, col ="blue", lwd = 3, type="l")
abline(h = 0.03, col = "darkgreen")
calculate_length <- Vectorize(function() {
values <- vector()
length <- 0
while (paste(values, collapse = "") != TLN) {
values <- tail(append(values, sample(0:9, 1)), nchar(TLN))
length <- length + 1
}
return (length)
})
mean(replicate(100, calculate_length()))
estimate_probability <- Vectorize(function (m, n) {
sample_data <- apply(
replicate(m, sample(0:9, n, replace = T)), 2,
function(x) grepl(TLN, paste(x, collapse = "")))
return (length(sample_data[sample_data == TRUE]) / length(sample_data))
})
theoretical_probability <- function (n) 1 - ((1 - 0.001) ^ n)
# 0.001 is the limiting probability of the state 4
TIN <- 20
# set.seed(TIN) TODO: uncomment
TLN <- paste("0", TIN, sep = "")
P = matrix(c(
0.9, 0.1, 0.0, 0.0,
0.8, 0.1, 0.1, 0.0,
0.9, 0.0, 0.0, 0.1,
0.8, 0.1, 0.1, 0), nrow=4, byrow=T)
calculate_by_eigenvector <- function (probs) {
left_eigenvector <- eigen(t(probs))$vectors[,1]
return (sapply(left_eigenvector / sum(left_eigenvector), Re))
}
calculate_by_matrix_multiplication <- function (probs) {
return ((probs %*% probs %*% probs %*% probs)[1, ])
}
cat("Transition probabilities (eigenvectors): ", calculate_by_eigenvector(P), "\n")
cat("Transition probabilities (matrices): ", calculate_by_matrix_multiplication(P))
estimate_probability <- Vectorize(function (m, n) {
sample_data <- apply(
replicate(m, sample(0:9, n, replace = T)), 2,
function(x) grepl(TLN, paste(x, collapse = "")))
return (length(sample_data[sample_data == TRUE]) / length(sample_data))
})
theoretical_probability <- function (n) 1 - ((1 - 0.001) ^ n)
# 0.001 is the limiting probability of the state 4
x <- seq(50, 2000, by = 50)
estimated_data = estimate_probability(100, x)
theoretical_data = theoretical_probability(x)
plot(
x,
estimated_data, col ="blue", lwd = 3)
lines(
x,
theoretical_data)
plot(
x,
abs(estimated_data - theoretical_data), col ="blue", lwd = 3, type="l")
x <- seq(100, 1000, by = 100)
n <- 1000
m <- 100
estimated_data = apply(replicate(m, estimate_probability(x, n) - theoretical_probability(n)), 1, function (x) quantile(x, .95))
TIN <- 20
# set.seed(TIN) TODO: uncomment
TLN <- paste("0", TIN, sep = "")
P = matrix(c(
0.9, 0.1, 0.0, 0.0,
0.8, 0.1, 0.1, 0.0,
0.9, 0.0, 0.0, 0.1,
0.8, 0.1, 0.1, 0), nrow=4, byrow=T)
calculate_by_eigenvector <- function (probs) {
left_eigenvector <- eigen(t(probs))$vectors[,1]
return (sapply(left_eigenvector / sum(left_eigenvector), Re))
}
calculate_by_matrix_multiplication <- function (probs) {
return ((probs %*% probs %*% probs %*% probs)[1, ])
}
cat("Transition probabilities (eigenvectors): ", calculate_by_eigenvector(P), "\n")
cat("Transition probabilities (matrices): ", calculate_by_matrix_multiplication(P))
estimate_probability <- Vectorize(function (m, n) {
sample_data <- apply(
replicate(m, sample(0:9, n, replace = T)), 2,
function(x) grepl(TLN, paste(x, collapse = "")))
return (length(sample_data[sample_data == TRUE]) / length(sample_data))
})
theoretical_probability <- function (n) 1 - ((1 - 0.001) ^ n)
# 0.001 is the limiting probability of the state 4
x <- seq(100, 2000, by = 10)
estimated_data = estimate_probability(500, x)
TIN <- 20
# set.seed(TIN) TODO: uncomment
TLN <- paste("0", TIN, sep = "")
P = matrix(c(
0.9, 0.1, 0.0, 0.0,
0.8, 0.1, 0.1, 0.0,
0.9, 0.0, 0.0, 0.1,
0.8, 0.1, 0.1, 0), nrow=4, byrow=T)
calculate_by_eigenvector <- function (probs) {
left_eigenvector <- eigen(t(probs))$vectors[,1]
return (sapply(left_eigenvector / sum(left_eigenvector), Re))
}
calculate_by_matrix_multiplication <- function (probs) {
return ((probs %*% probs %*% probs %*% probs)[1, ])
}
cat("Transition probabilities (eigenvectors): ", calculate_by_eigenvector(P), "\n")
cat("Transition probabilities (matrices): ", calculate_by_matrix_multiplication(P))
estimate_probability <- Vectorize(function (m, n) {
sample_data <- apply(
replicate(m, sample(0:9, n, replace = T)), 2,
function(x) grepl(TLN, paste(x, collapse = "")))
return (length(sample_data[sample_data == TRUE]) / length(sample_data))
})
theoretical_probability <- function (n) 1 - ((1 - 0.001) ^ n)
# 0.001 is the limiting probability of the state 4
x <- seq(100, 2000, by = 100)
estimated_data = estimate_probability(500, x)
theoretical_data = theoretical_probability(x)
plot(
x,
estimated_data, col ="blue", lwd = 3)
lines(
x,
theoretical_data)
plot(
x,
abs(estimated_data - theoretical_data), col ="blue", lwd = 3, type="l")
x <- seq(100, 1000, by = 100)
n <- 1000
m <- 100
estimated_data = apply(replicate(m, estimate_probability(x, n) - theoretical_probability(n)), 1, function (x) quantile(x, .95))
plot(
x,
estimated_data, col ="blue", lwd = 3, type="l")
abline(h = 0.03, col = "darkgreen")
calculate_length <- Vectorize(function() {
values <- vector()
length <- 0
while (paste(values, collapse = "") != TLN) {
values <- tail(append(values, sample(0:9, 1)), nchar(TLN))
length <- length + 1
}
return (length)
})
mean(replicate(100, calculate_length()))
TIN <- 20
# set.seed(TIN) TODO: uncomment
TLN <- paste("0", TIN, sep = "")
P = matrix(c(
0.9, 0.1, 0.0, 0.0,
0.8, 0.1, 0.1, 0.0,
0.9, 0.0, 0.0, 0.1,
0.8, 0.1, 0.1, 0), nrow=4, byrow=T)
calculate_by_eigenvector <- function (probs) {
left_eigenvector <- eigen(t(probs))$vectors[,1]
return (sapply(left_eigenvector / sum(left_eigenvector), Re))
}
calculate_by_matrix_multiplication <- function (probs) {
return ((probs %*% probs %*% probs %*% probs)[1, ])
}
cat("Transition probabilities (eigenvectors): ", calculate_by_eigenvector(P), "\n")
cat("Transition probabilities (matrices): ", calculate_by_matrix_multiplication(P))
estimate_probability <- Vectorize(function (m, n) {
sample_data <- apply(
replicate(m, sample(0:9, n, replace = T)), 2,
function(x) grepl(TLN, paste(x, collapse = "")))
return (length(sample_data[sample_data == TRUE]) / length(sample_data))
})
theoretical_probability <- function (n) 1 - ((1 - 0.001) ^ n)
# 0.001 is the limiting probability of the state 4
x <- seq(100, 2000, by = 100)
estimated_data = estimate_probability(500, x)
theoretical_data = theoretical_probability(x)
plot(
x,
estimated_data, col ="blue", lwd = 3)
lines(
x,
theoretical_data)
x <- seq(100, 1000, by = 100)
n <- 1000
m <- 100
estimated_data = apply(replicate(m, estimate_probability(x, n) - theoretical_probability(n)), 1, function (x) quantile(x, .95))
plot(
x,
estimated_data, col ="blue", lwd = 3, type="l")
x <- seq(500, 1000, by = 100)
n <- 1000
m <- 100
estimated_data = apply(replicate(m, estimate_probability(x, n) - theoretical_probability(n)), 1, function (x) quantile(x, .95))
plot(
x,
estimated_data, col ="blue", lwd = 3, type="l")
abline(h = 0.03, col = "darkgreen")
TIN <- 20
# set.seed(TIN) TODO: uncomment
TLN <- paste("0", TIN, sep = "")
P = matrix(c(
0.9, 0.1, 0.0, 0.0,
0.8, 0.1, 0.1, 0.0,
0.9, 0.0, 0.0, 0.1,
0.8, 0.1, 0.1, 0), nrow=4, byrow=T)
calculate_by_eigenvector <- function (probs) {
left_eigenvector <- eigen(t(probs))$vectors[,1]
return (sapply(left_eigenvector / sum(left_eigenvector), Re))
}
calculate_by_matrix_multiplication <- function (probs) {
return ((probs %*% probs %*% probs %*% probs)[1, ])
}
cat("Transition probabilities (eigenvectors): ", calculate_by_eigenvector(P), "\n")
cat("Transition probabilities (matrices): ", calculate_by_matrix_multiplication(P))
estimate_probability <- Vectorize(function (m, n) {
sample_data <- apply(
replicate(m, sample(0:9, n, replace = T)), 2,
function(x) grepl(TLN, paste(x, collapse = "")))
return (length(sample_data[sample_data == TRUE]) / length(sample_data))
})
theoretical_probability <- function (n) 1 - ((1 - 0.001) ^ n)
# 0.001 is the limiting probability of the state 4
x <- seq(100, 2000, by = 100)
estimated_data = estimate_probability(500, x)
theoretical_data = theoretical_probability(x)
plot(
x,
estimated_data, col ="blue", lwd = 3)
lines(
x,
theoretical_data)
x <- seq(500, 1000, by = 100)
n <- 1000
m <- 100
estimated_data = apply(replicate(m, estimate_probability(x, n) - theoretical_probability(n)), 1, function (x) quantile(x, .95))
plot(
x,
estimated_data, col ="blue", lwd = 3, type="l")
abline(h = 0.03, col = "darkgreen")
N <- 1000
n <- 1000
m <- 100
hist(replicate(m, estimate_probability(N, n) - theoretical_probability(n)))
calculate_length <- Vectorize(function() {
values <- vector()
length <- 0
while (paste(values, collapse = "") != TLN) {
values <- tail(append(values, sample(0:9, 1)), nchar(TLN))
length <- length + 1
}
return (length)
})
mean(replicate(100, calculate_length()))
N <- 1000
n <- 1000
m <- 100
hist(replicate(m, abs(estimate_probability(N, n) - theoretical_probability(n))))
N <- 1000
n <- 1000
m <- 100
hist(
replicate(m, abs(estimate_probability(N, n) - theoretical_probability(n))),
title = "Absolute error histogram",
xlab = "Absolute error")
N <- 1000
n <- 1000
m <- 100
hist(
replicate(m, abs(estimate_probability(N, n) - theoretical_probability(n))),
title = "Absolute error histogram",
xlab = "Absolute error")
N <- 1000
n <- 1000
m <- 100
hist(
replicate(m, abs(estimate_probability(N, n) - theoretical_probability(n))),
main = "Absolute error histogram",
xlab = "Absolute error")
